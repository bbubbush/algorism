'''
[ 골드바흐의 추측 ]
1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 
하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 
이러한 숫자를 골드바흐 숫자라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 숫자의 골드바흐 파티션이라고 한다. 
예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 
10000보다 작은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 
만약 가능한 n의 골드바흐 파티션이 여러가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.
    
입력 예제)
3            -> test case
8            -> n1
10
16

출력 예제)
3 5
5 5
5 11

'''
        
'''
[ 접근방법 ]
일단 n의 입력값 제한이 10000밖에 안되기 때문에 미리 소수 리스트를 만들었다.
이 소수 리스트로 답을 찾아야 하는데, 소수리스트 자체도 약 1200개의 값을 담고 있어 일일이 두 값의 합이 n이 되는지 확인하면
O(n^2)만큼 걸린다. 그래서 방법을 조금 달리해 문제의 조건을 이용하기로 했다. 

    만약 가능한 n의 골드바흐 파티션이 여러가지인 경우, 두 소수의 차이가 가장 작은 것을 출력한다.

위의 명제를 이용하면 n//2부터 값이 있는지 확인하면 된다. 다음은 n//2 - 1, n//2 - 2,... 이런식으로 비교를 하면 두 수의 차이가 가장 작은 
골드바흐 파티션을 출력할 수 있다.



'''

# 10000까지의 소수 리스트를 미리 만들어 둔다
prime_num = []
for i in range(2, 10001):
    for j in range(2, i):
        if i % j == 0:
            break
    else:
        prime_num.append(i)

def goldbach(n):
    # n이 홀수인지 확인
    if n % 2 == 1:
        return -1

    cnt = 0
    while cnt < n//2:
        if n//2 - cnt in prime_num:             # n//2 부터 시작해서 하나씩 빼가면서 소수리스트 안에 존재하는지 확인 
            if n//2 + cnt in prime_num:
                return "{} {}".format(n//2 - cnt, n//2 + cnt)
            
        cnt += 1

for t in range(int(input())):
    n = int(input())
    print(goldbach(n))

# https://github.com/bbubbush/algorithm/tree/master/BOJ/9020.py