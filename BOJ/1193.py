'''
[ 분수 찾기 ]
무한히 큰 배열에 다음과 같이 분수들이 적혀있다.

1/1	1/2	1/3	1/4	1/5	…
2/1	2/2	2/3	2/4	…	…
3/1	3/2	3/3	…	…	…
4/1	4/2	…	…	…	…
5/1	…	…	…	…	…
…	…	…	…	…	…
이와 같이 나열된 분수들을 1/1 -> 1/2 -> 2/1 -> 3/1 -> 2/2 -> … 과 같은 순서로
차례대로 1번, 2번, 3번, 4번, 5번, … 분수라고 하자.

X가 주어졌을 때, X번째 분수를 구하는 프로그램을 작성하시오.

입력 예제)
14

출력 예제)
2/4

'''

'''
[ 접근방법 ]
이 문제는 '규칙찾기' 라는 탭으로 분류되어 있는 문제다. 따라서 분수간의 규칙을 찾는 것이 중요하다
공책을 통해 위의 문제의 10번째 까지의 값을 하나씩 적어보았다.(출력되는 값이 i/j라고 가정했다)
n		idx		i 		j
1 		1 		1 		1

2 		2 		1 		2
2 		3  		2 		1

3 		4 		3 		1
3  		5 		2 		2
3 		6 		1 		3

4 		7 		1 		4
4 		8 		2 		3
4 		9 		3 		2
4 		10 		4 		1 
…		…		…		…

이렇게 순서대로 시작해서 inData번째 값(이하 idx) 까지 진행해도 되겠지만 속도도 느리고 자원낭비도 심하다
따라서 idx의 값을 바로 찾아보도록 노력했다. 
문제의 핵심은 idx가 어떤 n에  속하는지 였다. i+j의 값이 n에 따라 일정하게 유지되기 때문이다. 예를들어
idx가 5인 값은 n이 3 이므로 i+j가 3인 것을 알 수 있다. 

이를 바탕으로 n은 1부터 1씩 증가하는 등차수열의 합으로 계산하여 이 값이 idx보다 커지면 n의 값을 확정 짓는 방법을 선택했다.

i+j의 값은 구했는데 그럼 어떻게 배분할 것인가의 문제가 남았다. 자세히 보면 n이 짝수일 경우와 홀수일 경우 i와 j의 패턴이 같음을
알 수 있다. 

n이 홀수 : i = 1, j = n   
n이 짝수 : i = n, j = 1   의 형태로 끝나게 된다. 그래서 이를 바탕으로 inx에서 n번째 까지의 등차수열의 합을 빼어 
i와 j의 값을 조정해 주었다.

성공률이 50% 이상으로 높은 문제였지만 생각보다 규칙찾느데 많은 시간을 할애했다. 규칙을 발견하는 눈을 더 키워야겠다는 생각이 들었다.

p.s 처음에 등차수열의 합을 공식을 안쓰고 for문을 써서 시간 초과가 될 뻔했다. 수학적인 수식을 적극 활용하도록 의식해야겠다.

	
'''
inData = int(input())
n = 0
sumVal = 0
while sumVal < inData:
    n += 1
    sumVal = int(n * (n + 1) / 2)

i, j = n - (sumVal - inData), 1 + (sumVal - inData)

if n % 2 == 1:
    i, j = j, i

print('{}/{}'.format(i, j))
 
