'''
[ 공항 건설하기 ]
1보다 큰 N개의 도시 중 한 곳에 공항을 지을 예정입니다. 사람들의 편의를 위해 공항으로부터 각 사람들까지의 도시간 이동 거리가 최소가 되는 도시에 짓기로 하였습니다. 
편의상 도시는 일직선상에 놓여있다고 가정하며 좌표의 범위는 음수가 포함됩니다. 또한 좌표는 정렬되어 있지 않습니다. 
직선상의 위치와 그 도시에 사는 사람들의 수가 주어질 때, 공항을 지을 도시의 위치를 반환해주는 함수 choose_city 함수를 완성하세요. 
거리가 같은 도시가 2개 이상일 경우 위치가 더 작은 쪽의 도시를 선택하면 됩니다. 예를 들어 다음과 같은 정보의 도시가 있다고 가정해 봅시다.

1       2       3       (위치)
5       2       3       (인구수)

이 살 경우, 각각의 도시에 공항을 지었을 때의 사람들의 이동 거리는 8, 8, 12 이므로 1번 또는 2번에 지을 수 있지만, 1의 위치가 더 작으므로 1을 반환해주면 됩니다.


'''

'''
[ 접근방법 ]
처음에는 문제가 제시하는 내용처럼 코드를 구현했다. 기준도시와 다른 도시의 거리를 각각 절대값으로 구하고, 각 도시의 인수만큼을 곱해 각자의 값을 갖게 했다.
물론 정답은 나오지만 시간초과로 인해 정답이 될 순 없었다. 그래서 다른 사람의 코드를 참고했다. 그러고 나서 생각해보니 결국 거리도 중요한 요인이지만 인구수는 그보다 
더 중요한 요인이라는 것을 깨닫게 되었다.

수식으로 구하진 못했지만 test case의 값을 거리도 조절해보고 인구수도 조절해봤다. 그러니 이동거리의 합의 변화에 영향을 크게 미치는 것은 인구수였다.

따라서 입력받은 city 정보를 위치 상으로 정렬하고 왼쪽 도시부터 순서대로 인구수를 더해가며 전체 인구수의 절반이 되거나 넘는 순간의 도시에 공항을 지었다. 

사실 위의 방법이 100% 맞다고 장담할 수 없다. 오랜만에 등장한 감으로 푸는 문제라고 생각한다.

'''

def choose_city(n,city):
    # 사람이 많은 곳을 기준으로잡기 위해 전체 인구의 절반의 위치를 하는 곳을 찾는다
    
    city.sort()
    totalPeople = 0
    countPeople = 0            
    for i in city:
        totalPeople += i[1]
    
    for i in city:
        countPeople += i[1]
        totalPeople -= i[1]

        if countPeople >= totalPeople:
            return i[0]
print(choose_city(3,[[1,5],[2,2],[3,3]]))

# 출처 : http://mystes.net/it/algorithm/construct-airport-algorithm/