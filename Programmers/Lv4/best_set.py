'''
[ 최고의 집합 ]
자연수 N개로 이루어진 집합 중에, 각 원소의 합이 S가 되는 수의 집합은 여러 가지가 존재합니다. 최고의 집합은, 위의 조건을 만족하는 집합 중 
각 원소의 곱이 최대가 되는 집합을 의미합니다. 집합 원소의 개수 n과 원소들의 합 s가 주어지면, 최고의 집합을 찾아 원소를 오름차순으로
반환해주는 bestSet 함수를 만들어 보세요. 만약 조건을 만족하는 집합이 없을 때는 배열 맨 앞에 –1을 담아 반환하면 됩니다.
예를 들어 n=3, s=13이면 [4,4,5]가 반환됩니다. (자바는 집합이 없는 경우 크기가 1인 배열에 -1을 담아 반환해주세요.)
'''

'''
[ 접근방법 ]
핵심은 n개의 수로 가장 큰 곱셈을 만드는 방법이다. 예를 든 더해서 13이 되는 3개의 수 중 가장 극단적인 [1, 1, 11]을 살펴보자면 1이 2개나 있으니 곱해도 11밖에 안나온다. 
최악이다. 그래서 n개의 수가 최대한 편차없이 출력되어야 한다. 그럼 그 수를 어떻게 구할것이냐? s를 n으로 나눈 몫을 기준으로 잡는다. 13을 3으로 나누니 4가 나온다.
그럼 나머지가 몇이든 n보다 작을 것이다. 그럼 몫을 n개의 리스트로 두고 나머지 원소 하나, 하나 나눠준다. 예를 든 13의 경우 3으로 나누니 몫은 4이고 나머지는 1이다. 
즉 4인 원소 3개 중 1개는 나머지 하나를 받아서 5가 된 [4, 4, 5]가 된다. 반대로 n이 s보다 커서 적용이 안되는 경우엔 [-1]을 리턴한다. 
애초에 n이 s보다 크면 n 모두다 1로 채워도 s가 되지 못한다.

'''

def best_set(n, s):
    if n > s: return [-1]

    temp = s // n
    answer = [temp for i in range(n)]

    cnt = s % n
    while cnt > 0:
        answer[cnt] += 1
        cnt -= 1
    return sorted(answer)

# 아래는 테스트로 출력해 보기 위한 코드입니다.
print(best_set(3,13))
