'''
[ 땅따먹기 게임 ]
영희는 땅따먹기 게임에 푹 빠졌습니다. 땅따먹기 게임의 땅은 총 N행 4열로 나누어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 
땅을 밟으면서 한 행씩 내려올 때, 영희는 각 행의 4칸 중 1칸만 밟으면서 내려올 수 있습니다. 땅따먹기 게임에는 같은 열을 연속해서 밟을 수가 없는 특수 규칙이 있습니다. 
즉, 1행에서 (5)를 밟았다면, 2행의 (8)은 밟을 수가 없게 됩니다. 마지막 행까지 모두 내려왔을 때, 점수가 가장 높은 사람이 게임의 승자가 됩니다. 
여러분이 hopscotch 함수를 제작하여 영희가 최대 몇 점을 얻을 수 있는지 알려주세요. 예를 들어

    1 2 3 5
    5 6 7 8
    4 3 2 1

의 땅이 있다면, 영희는 각 줄에서 (5), (7), (4) 땅을 밟아 16점을 최고점으로 받을 수 있으며, hopscotch 함수에서는 16을 반환해주면 됩니다.
'''

'''
[ 접근방법 ]
dp를 사용해 접근했다. 간단하게 보기 위해 입력된 board의 값이 [[1, 2, 3, 5], [5, 6, 7, 8]] 일때 dp의 값을 보자. 참고로 dp에는 누적된 최대값이 담긴다.

우선 dp[0]은 board[0]값을 그대로 가져가므로 dp[0] = [1, 2, 3, 5] 가 된다.

dp[1][0]값을 보자. board[1][0]의 값은 5다. 그럼 dp[0][0]의 값부터 dp[0][3]까지 값을 하나씩 가져와 board[1][0]의 값에 더해 보고 이 중 최대갑을 
dp[1][0]에 남긴다. 물론 dp[1][0]의 값을 구할 땐 dp[0][0]의 값을 가져오면 안된다. 이것에만 주의하면서 값을 구하면

dp = [
        [1, 2, 3, 5],
        [10, 11, 12, 11]
    ]

가 된다. dp[1][0] = 2+5, 3+5, 5+5 중 가장 큰 수인 10이 남게 된 것이다. dp[-1]에 있는 값 중 가장 큰 값을 출력하면 우리가 원하는 가장 큰 경우를 찾을 수 있다.
 

'''

def hopscotch(board, size):
    dp = [[0 for col in range(4)] for row in range(1001)]
    row = len(board)
    
    # 맨 첫번째 땅의 값을 dp에 입력한다.
    dp[0] = board[0]


    for i in range(1, row):
        for j in range(4):
            for k in range(4):
                if j != k:
                    dp[i][j] = max(dp[i][j], board[i][j] + dp[i-1][k])
    
    result = 0
    for i in range(4):
        result = max(result, dp[row-1][i])
        
    return result


#아래는 테스트로 출력해 보기 위한 코드입니다.
board =  [[ 1, 2, 3, 5 ], [ 5, 6, 7, 8 ], [4, 3, 2, 1]]
print(hopscotch(board, 3))
