'''
[ 가장 큰 정사각형 찾기 ]
O와 X로 채워진 표가 있습니다. 표 1칸은 1 x 1 의 정사각형으로 이루어져 있습니다.
표에서 O로 이루어진 가장 큰 정사각형을 찾아 넓이를 반환하는 findLargestSquare 함수를 완성하세요.
예를 들어

        1	2	3	4	5
        X	O	O	O	X
        X	O	O	O	O
        X	X	O	O	O
        X	X	O	O	O
        X	X	X	X	X
가 있다면 정답은

        1	2	3	4	5
        X	O	O	O	X
        X	O	'O'	'O'	'O'
        X	X	'O'	'O'	'O'
        X	X	'O'	'O'	'O'
        X	X	X	X	X
가 되며 넓이는 9가 되므로 9를 반환해 주면 됩니다.
'''

'''
[ 접근방법 ]
처음으로 dp와 재귀의 차이를 알게 한 문제.
정사각형을찾아야 한다. 한 변의 길이가 1인 정사각형은 한 값만 O이면 된다.
그럼 한 변의 길이가 2인 정사각형은? 여기서부턴 대상의 값 뿐만 아니라 근처의 값도 확인해야 한다.
이 알고리즘은 dp에 각 좌표가 넓이가 얼마인지 기록하게 된다. 또한 한 변의 최소 길이를 2로 정의한다
(1은 사실 의미가 없다) 
그럼 2보다 큰 정사각형을 찾아보자. 이때 기준을 (0,0)부터 시작해서 (n-1, n-1)까지 할지, (1,1) 부터
(n, n)까지 할지 기준을 잘 정해야 한다.
강의에선 후자로 했기 때문에 우리도 후자로 한다.

(1,1)은 최대 크기가 2이다.
(우리가 기준으로 삼는 꼭지점은 정사각형의 우측 아래 꼭지점이라는 것을 기억해야 한다)
이를 확인하는 방법은 내 (0,0), (0,1), (1,0)의 좌표에 저장된 이들의 최대크기를 비교해
가장 작은값에 + 1을 한다. 여기서 의문이 들었던 것이
    그럼 (0,0)의 dp값은? 언제구했지? dp는 0으로 초기화 했는데? 순서가 이상하지 않을까?
이런 것이다. 실제로 dp의 값을 출력해보면 입력된 값보다 좌표가 (+1, +1)씩 되어있다.
그러나 우리가 구하는 것은 최대값이고, for문을 돌면서 최대값과 구해진 dp의 값을 비교해 큰 값을 answer에
담고있기 때문에 좌표가 어긋나는 것을 신경쓰지 않아도 된다.

p.s 설명하기 참 어렵다. 아래 친절하게 동영상으로 설명된 강의가 있다. 나도 이걸 보면서 도움을 받았다 ㅎㅎ
'''


def findLargestSquare(board):
    dp = [[0 for col in range(1001)] for row in range(1001)]
    answer = 0
    for i in range(1, len(board)+1):
        for j in range(1, len(board[0])+1):
            if board[i-1][j-1] is not 'X':
                dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1
                answer = max(answer, dp[i][j])
    return answer ** 2

#아래 코드는 출력을 위한 테스트 코드입니다.

testBoard = [['O','O','O','O','X'],['O','O','O','O','O'],['X','X','O','O','O'],['X','X','O','O','O'],['X','X','X','X','X']]
print(findLargestSquare(testBoard))


# 도움받은 강의 : https://programmers.co.kr/learn/courses/18/lessons/847
