'''
[ 괄호 확인하기 ]
is_pair함수는 문자열 s를 매개변수로 입력받습니다.
s에 괄호가 알맞게 짝지어져 있으면 True를 아니면 False를 리턴하는 함수를 완성하세요.
예를들어 s가 (hello)()면 True이고, )(이면 False입니다.
s가 빈 문자열("")인 경우는 없습니다.

'''

'''
[ 접근방법 ]
이 문제는 논란의 여지가 다분하다. 

아래 코드를 짤 때 문제에는 없지만 문제 설명의 예제를 통해 스스로 몇가지 제약을 두고 코드를 짯다.

1) 괄호는 '('와 ')'가 반드시 쌍으로 존재한다. 예를 들면 (()식의 입력은 들어오지 않는다고 가정했다.
2) '('와 ')' 외의 모든 입력은 의미가 없으므로 문자의 순서를 유지하며 제거했다.

2번의 경우는 크게 문제 없을수 있지만 1번은 3번째 test case의 경우 True를 리턴한다. 

지금와서야 생각하면 스택을 사용해 풀어야 하는 문제지만 이 문제 역시 통과하면 안되는 문제를 통과시키는거보면
위에 세운 가정이 맞아 통과된거 같다. 

때문에 풀이가 올라오는 곳에는 댓글로 본인들의 혼란을 토로하고 있다. 

마지막으로 정리하면 이 문제는 스택으로 푸는 것이 맞고, 스스로 문제에 대한 가정을 세우는 것은 절대 하면 안되는 행동이다.

'''

def is_pair(s):
    temp = list(filter(lambda x : x == '(' or x == ')', s))
    '''
    # 가정을 세우고 푼 풀이
    if len(temp) % 2 == 1 or temp[0] == ')' or temp[-1] == '(':
        return False
    '''

    # 스택을 활용한 풀이
    answer = []

    while len(temp) > 0:
    	if len(answer) == 0:
    		answer.append(temp.pop())
    	else:

	    	if temp[-1] == '(' and answer[-1] == ')':
	    		answer.pop()
	    		temp.pop()
	    	else:
	    		answer.append(temp.pop())
    return len(answer) == 0

# 아래는 테스트로 출력해 보기 위한 코드입니다.
print( is_pair("(hello)()"))
print( is_pair(")("))
print( is_pair("((()"))	# 가정을 세우고 푼 풀이에서 잘못된 값을 리턴