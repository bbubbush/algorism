'''
[ 소수 찾기 ]
number_of_prime 메소드는 정수 n을 매개변수로 입력받습니다.

1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하도록 number_of_prime 메소드를 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

10을 입력받았다면, 1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환
5를 입력받았다면, 1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환
'''

'''
[ 접근방법 ]
1부터 n까지 사이의 모든 수에 대해 소수여부를 판단해야 하는 문제입니다.

소수는 약수를 1과 자기자신으로만 갖는 수입니다.

기본적으로는 약수를 구하는 알고리즘을 이용하며, 1부터 n 사이의 수 중 소수임을 확인하고 싶은 수 k에 대해 

2 ~ k-1까지 의 수를 순서대로 k로 나누면 됩니다. 

아래의 코드는 for ~ else문을 사용해 풀었습니다.

'''

def number_of_prime(n):
    result = 0

    for i in range(2, n+1):
        for j in range(2, i):
            if i % j == 0:
                break
        else:
            result += 1
    return result

# 아래는 테스트로 출력해 보기 위한 코드입니다.
print(number_of_prime(10))