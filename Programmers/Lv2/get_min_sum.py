'''
[ 최소값 만들기 ]
자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 
이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.

예를 들어 A = [1, 2] , B = [3, 4] 라면

	1. A에서 1, B에서 4를 뽑아 곱하여 더합니다.
	2. A에서 2, B에서 3을 뽑아 곱하여 더합니다.

수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.
수열 A,B가 주어질 때, 최솟값을 반환해주는 get_min_sum 함수를 완성하세요.
'''

'''
[ 접근방법 ]
문제의 조건 내에서 최소값을 만들려면 핵심은 '배열내 최대값은 최소값과 곱하는 것을 반복한다'이다.

예를들어

	A = [1, 3, 5]
	B = [2, 4 ,6]	(개인적으로 매개변수명을 대문자로 시작하는걸 불편하게 생각하는게 문제에서 이렇게 제공되어 그냥 사용하겠다.)

이렇게 입력이 된다면 A, B 내에서 가장 큰 수는 6이다. 따라서 6을 먼저 최소의 값으로 만들기 위해 6을 가진 B의 상대 배열인 A 내에서 
가장 작은 값인 1과 곱해준다. 이 과정을 반복해주면 문제를 풀 수 있다.

이미 사용한 값의 중복을 막기 위해 remove()를 통해 제거했지만 여기에는 각자의 방법이 들어갈 수 있다고 생각한다.

'''

def get_min_sum(A,B):
    answer = 0
    if len(A) != len(B):
        return -1

    while len(A) > 0:
        if max(A) > max(B):
            answer += max(A) * min(B)
            A.remove(max(A))
            B.remove(min(B))
        else:
            answer += min(A) * max(B)
            A.remove(min(A))
            B.remove(max(B))
    return answer

#아래 코드는 출력을 위한 테스트 코드입니다.

print(get_min_sum([1,2,0],[3,4,5]))